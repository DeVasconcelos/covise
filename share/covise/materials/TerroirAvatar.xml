<_TerroirAvatar cullFace="off" transparent="true"><uniform name="SplotchCellSize" type="float" value="0.3"/><uniform name="SplotchWaveNr" type="int" value="8"/><uniform name="Time" type="int" value="0"/><uniform name="WaterScale" type="vec3" value="0.50 0.5 0.3"/><uniform name="WaterColor" type="vec4" value="1 1 1 1"/><uniform name="WaveSpeed" type="vec3" value="0.2 0.1 0.2"/><uniform name="WaveSpeed2" type="vec3" value="-0.1 0.2 -0.2"/><uniform name="WaveScale" type="vec3" value="2 1.5 0.2"/><uniform name="diffuseMap" type="sampler2D" value="0"/><uniform name="normalMap" type="sampler2D" value="1"/><uniform name="cubeMap" type="samplerCube" value="2"/><uniform name="FresExp" type="float" value="0.5"/><uniform name="fps" type="float" value="0.4"/><uniform name="Bumpiness" type="float" value="0.1"/><uniform name="Transparency" type="float" value="0.2"/><uniform name="KrMin" type="float" value="0.1"/><uniform name="Kr" type="float" value="1.0"/><attribute name="aBinormal" type="binormal" value="6"/><attribute name="aTangent" type="tangent" value="7"/><vertexProgram>varying vec3 normal, lightDir, eyeVec;
    varying vec3 Binormal;
    varying vec3 Tangent;
    varying vec2 Texcoord;
    varying vec2 Texcoord2;
    varying vec2 Texcoord3;

    attribute vec3 aBinormal;
    attribute vec3 aTangent;

    uniform vec3 WaveSpeed;
    uniform vec3 WaveSpeed2;
    uniform vec3  WaterScale;
    uniform vec3 WaveScale;
    
    uniform int Time;
    uniform float fps;

    void main( void )
    {
        float time = (float(Time)/1000.0)*fps;
        normal   = gl_NormalMatrix * gl_Normal;
        Binormal = gl_NormalMatrix * aBinormal;
        Tangent  = gl_NormalMatrix * aTangent; 
        Texcoord.x = gl_MultiTexCoord0.x ;
        Texcoord.y = gl_MultiTexCoord0.y ;
        Texcoord2.x = gl_MultiTexCoord0.x *WaterScale.x +time*WaveSpeed.x*WaveScale.x;
        Texcoord2.y = gl_MultiTexCoord0.y *WaterScale.y +time*WaveSpeed.y*WaveScale.y;
        Texcoord3.x = gl_MultiTexCoord0.x *WaterScale.x +time*WaveSpeed2.x*WaveScale.x;
        Texcoord3.y = gl_MultiTexCoord0.y *WaterScale.y +time*WaveSpeed2.y*WaveScale.y;
     
     	vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);

     	lightDir = vec3(gl_LightSource[0].position.xyz - vVertex);
     	eyeVec = -vVertex;
     	
     
	gl_Position = ftransform();	
gl_ClipVertex = gl_ModelViewMatrix*gl_Vertex;
    }
  </vertexProgram><fragmentProgram>varying vec3 normal, lightDir, eyeVec;
    varying vec3 Binormal;
    varying vec3 Tangent;
    varying vec2 Texcoord;
    varying vec2 Texcoord2;
    varying vec2 Texcoord3;
   
   
    uniform sampler2D diffuseMap;
    uniform sampler2D normalMap;
    uniform samplerCube cubeMap;

    uniform int Time;
    uniform vec4  WaterColor;
   
    uniform float Bumpiness;
    uniform float Transparency;
    uniform float KrMin;
    uniform float Kr;
    uniform float FresExp;

    uniform float SplotchCellSize;
    uniform int SplotchWaveNr;
   
    void main( void )
    {
    int gridSize = 3; // divide into 3x3 grid
    float t = mod(float(Time), float(gridSize*gridSize+1)*1000.0); // 10 seconds
    int splotchToShow = int(t/1000.0); 

    // assign splotch index according to Texcoord
    int splotchX = int(floor(Texcoord.x * float(gridSize)));
    int splotchY = int(floor(Texcoord.y * float(gridSize)));
    int splotchIdx = splotchY * gridSize + splotchX;

    // Calculate center of the current splotch
    vec2 cellSize = vec2(1.0 / float(gridSize));
    vec2 cellCenter = (vec2(splotchX, splotchY) + 0.5) * cellSize;

    // Distance from fragment to center of its splotch
    float dist = distance(Texcoord, cellCenter);
    float angle = atan(Texcoord.y - cellCenter.y, Texcoord.x - cellCenter.x);

    // Wavy radius: base radius plus sine modulation
    float baseRadius = SplotchCellSize * cellSize.x;
    float wave = 0.05 * cellSize.x * sin(float(SplotchWaveNr) * angle + 0.005);
    float splotchRadius = baseRadius + wave;

    // Only show if splotchIdx &lt; splotchToShow and within wavy radius
    float show = (splotchIdx &lt; splotchToShow &amp;&amp; dist &lt; splotchRadius) ? 1.0 : 0.0;

      vec4 final_color =
      	(gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) +
      	(gl_LightSource[0].ambient * gl_FrontMaterial.ambient);

      vec3 bumpmap = 2.0 * Bumpiness * texture2D( normalMap, Texcoord2 ).xyz - vec3(0.5,0.5,0.5);
      bumpmap = mix(-bumpmap,2.0 * Bumpiness * texture2D( normalMap, Texcoord3 ).xyz - vec3(0.5,0.5,0.5),0.5);
	  
      vec3 N = normalize(normal);
      vec3 Tn = normalize(Tangent);
      vec3 Bn = normalize(Binormal);
      N += (bumpmap.x * Tn + bumpmap.y * Bn);
      N = normalize(N);
      
      vec3 eyeVecN = normalize(eyeVec);
      	
      vec3 L = normalize(lightDir);

      vec3 reflVec   = reflect(-eyeVecN, N);
      vec4 reflColor = textureCube( cubeMap, reflVec );
      	
      float lambertTerm = abs(dot(N,L));
      if(lambertTerm &gt; 0.0)
      {
      
      	final_color += gl_LightSource[0].diffuse *
      	               WaterColor * lambertTerm*texture2D( diffuseMap, Texcoord);
        float vdn = dot(eyeVecN,N);
	float fres = KrMin + (Kr-KrMin) * pow(1.0-abs(vdn),FresExp);
	final_color = mix(final_color  ,reflColor,fres);
      //	final_color =	             reflColor;
      	vec3 E = normalize(eyeVecN);
      	vec3 R = reflect(-L, N);
      	float specular = pow( max(dot(R, E), 0.0), 
      		                 gl_FrontMaterial.shininess );
      	final_color += gl_LightSource[0].specular *
      	               gl_FrontMaterial.specular * 
      				   specular;	
        final_color.a = max(WaterColor.a,fres)- Transparency;
        final_color.rgb+=texture2D( diffuseMap, Texcoord).rgb;
        final_color.rgb = mix(vec3(0.0), final_color.rgb, show);
        final_color.a *= show;
      	}
	gl_FragColor = final_color;	
          
    }
  </fragmentProgram></_TerroirAvatar>